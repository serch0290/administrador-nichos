{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, CSP_NONCE, Optional, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@ngbracket/ngx-layout/_private-utils';\nimport { filter, tap, debounceTime, switchMap, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nfunction removeStyles(_document, platformId) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nconst BROWSER_PROVIDER = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {\n  static #_ = this.ɵfac = function CoreModule_Factory(t) {\n    return new (t || CoreModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CoreModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [BROWSER_PROVIDER]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [BROWSER_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n  /**\n   * @param matches whether the mediaQuery is currently activated\n   * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param mqAlias e.g. gt-sm, md, gt-lg\n   * @param suffix e.g. GtSM, Md, GtLg\n   * @param priority the priority of activation for the given breakpoint\n   */\n  constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.priority = priority;\n    this.property = '';\n  }\n  /** Create an exact copy of the MediaChange */\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n  constructor() {\n    this.stylesheet = new Map();\n  }\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element, style, value) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el, styleName) {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n  static #_ = this.ɵfac = function StylesheetMap_Factory(t) {\n    return new (t || StylesheetMap)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StylesheetMap,\n    factory: StylesheetMap.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StylesheetMap, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: [],\n  // This is disabled by default because otherwise the multiplier would\n  // run for all users, regardless of whether they're using this feature.\n  // Instead, we disable it by default, which requires this ugly cast.\n  multiplier: undefined,\n  defaultUnit: 'px',\n  detectLayoutDisplay: false\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory: () => false\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory: () => null\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nfunction mergeAlias(dest, source) {\n  dest = dest?.clone() ?? new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = source.suffix;\n    dest.priority = source.priority;\n  }\n  return dest;\n}\n\n/** A class that encapsulates CSS style generation for common directives */\nclass StyleBuilder {\n  constructor() {\n    /** Whether to cache the generated output styles */\n    this.shouldCache = true;\n  }\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n  sideEffect(_input, _styles, _parent) {}\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleUtils {\n  constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n    this._serverStylesheet = _serverStylesheet;\n    this._serverModuleLoaded = _serverModuleLoaded;\n    this._platformId = _platformId;\n    this.layoutConfig = layoutConfig;\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element, style, value = null) {\n    let styles = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style, elements = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target) {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n    return [value || 'row', hasInlineValue];\n  }\n  hasWrap(target) {\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element, attribute) {\n    return element.getAttribute(attribute) ?? '';\n  }\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element, styleName) {\n    return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : getServerStyle(element, styleName);\n  }\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element, styleName, inlineOnly = false) {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : '';\n  }\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  _applyMultiValueStyleToElement(styles, element) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ? element.style.setProperty(key, value) : setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n  static #_ = this.ɵfac = function StyleUtils_Factory(t) {\n    return new (t || StyleUtils)(i0.ɵɵinject(StylesheetMap), i0.ɵɵinject(SERVER_TOKEN), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(LAYOUT_CONFIG));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StyleUtils,\n    factory: StyleUtils.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StyleUtils, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: StylesheetMap\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [SERVER_TOKEN]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LAYOUT_CONFIG]\n    }]\n  }], null);\n})();\nfunction getServerStyle(element, styleName) {\n  const styleMap = readStyleAttribute(element);\n  return styleMap[styleName] ?? '';\n}\nfunction setServerStyle(element, styleName, styleValue) {\n  styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  const styleMap = readStyleAttribute(element);\n  styleMap[styleName] = styleValue ?? '';\n  writeStyleAttribute(element, styleMap);\n}\nfunction writeStyleAttribute(element, styleMap) {\n  let styleAttrValue = '';\n  for (const key in styleMap) {\n    const newValue = styleMap[key];\n    if (newValue) {\n      styleAttrValue += `${key}:${styleMap[key]};`;\n    }\n  }\n  element.setAttribute('style', styleAttrValue);\n}\nfunction readStyleAttribute(element) {\n  const styleMap = {};\n  const styleAttribute = element.getAttribute('style');\n  if (styleAttribute) {\n    const styleList = styleAttribute.split(/;+/g);\n    for (let i = 0; i < styleList.length; i++) {\n      const style = styleList[i].trim();\n      if (style.length > 0) {\n        const colonIndex = style.indexOf(':');\n        if (colonIndex === -1) {\n          throw new Error(`Invalid CSS style: ${style}`);\n        }\n        const name = style.substr(0, colonIndex).trim();\n        styleMap[name] = style.substr(colonIndex + 1).trim();\n      }\n    }\n  }\n  return styleMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** HOF to sort the breakpoints by descending priority */\nfunction sortDescendingPriority(a, b) {\n  const priorityA = a ? a.priority || 0 : 0;\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\nfunction sortAscendingPriority(a, b) {\n  const pA = a.priority || 0;\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n  constructor(_zone, _platformId, _document, _nonce) {\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    this._nonce = _nonce;\n    /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n    this.source = new BehaviorSubject(new MediaChange(true));\n    this.registry = new Map();\n    this.pendingRemoveListenerFns = [];\n    this._observable$ = this.source.asObservable();\n  }\n  /**\n   * Publish list of all current activations\n   */\n  get activations() {\n    const results = [];\n    this.registry.forEach((mql, key) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery) {\n    const mql = this.registry.get(mediaQuery);\n    return mql?.matches ?? this.registerQuery(mediaQuery).some(m => m.matches);\n  }\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   */\n  observe(mqList, filterOthers = false) {\n    if (mqList && mqList.length) {\n      const matchMedia$ = this._observable$.pipe(filter(change => !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1));\n      const registration$ = new Observable(observer => {\n        // tslint:disable-line:max-line-length\n        const matches = this.registerQuery(mqList);\n        if (matches.length) {\n          const lastChange = matches.pop();\n          matches.forEach(e => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n    return this._observable$;\n  }\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery) {\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    const matches = [];\n    buildQueryCss(list, this._document, this._nonce);\n    list.forEach(query => {\n      const onMQLEvent = e => {\n        this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n      };\n      let mql = this.registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n        this.registry.set(query, mql);\n      }\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n    return matches;\n  }\n  ngOnDestroy() {\n    let fn;\n    while (fn = this.pendingRemoveListenerFns.pop()) {\n      fn();\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  buildMQL(query) {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n  static #_ = this.ɵfac = function MatchMedia_Factory(t) {\n    return new (t || MatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(CSP_NONCE, 8));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatchMedia,\n    factory: MatchMedia.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatchMedia, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [CSP_NONCE]\n    }]\n  }], null);\n})();\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries, _document, _nonce) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    const query = list.join(', ');\n    try {\n      const styleEl = _document.createElement('style');\n      styleEl.setAttribute('type', 'text/css');\n      if (_nonce) {\n        styleEl.setAttribute('nonce', _nonce);\n      }\n      if (!styleEl.styleSheet) {\n        const cssText = `\n/*\n  @ngbracket/ngx-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n      _document.head.appendChild(styleEl);\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\nfunction buildMockMql(query) {\n  const et = new EventTarget();\n  et.matches = query === 'all' || query === '';\n  et.media = query;\n  et.addListener = () => {};\n  et.removeListener = () => {};\n  et.addEventListener = () => {};\n  et.dispatchEvent = () => false;\n  et.onchange = null;\n  return et;\n}\nfunction constructMql(query, isBrowser) {\n  const canListen = isBrowser && !!window.matchMedia('all').addListener;\n  return canListen ? window.matchMedia(query) : buildMockMql(query);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nfunction validateSuffixes(list) {\n  list.forEach(bp => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nfunction mergeByAlias(defaults, custom = []) {\n  const dict = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach(bp => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nconst DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n  priority: 1000\n}, {\n  alias: 'sm',\n  mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n  priority: 900\n}, {\n  alias: 'md',\n  mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n  priority: 800\n}, {\n  alias: 'lg',\n  mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n  priority: 700\n}, {\n  alias: 'xl',\n  mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n  priority: 600\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 599.98px)',\n  priority: 950\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 959.98px)',\n  priority: 850\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 1279.98px)',\n  priority: 750\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  priority: 650,\n  mediaQuery: 'screen and (max-width: 1919.98px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 600px)',\n  priority: -950\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 960px)',\n  priority: -850\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1280px)',\n  priority: -750\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1920px)',\n  priority: -650\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n  'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n  'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n  'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nconst ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_LANDSCAPE\n}, {\n  'alias': 'tablet.portrait',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nconst BREAKPOINTS = new InjectionToken('Token (@ngbracket/ngx-layout) Breakpoints', {\n  providedIn: 'root',\n  factory: () => {\n    const breakpoints = inject(BREAKPOINT);\n    const layoutConfig = inject(LAYOUT_CONFIG);\n    const bpFlattenArray = [].concat.apply([], (breakpoints || []).map(v => Array.isArray(v) ? v : [v]));\n    const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n  constructor(list) {\n    /**\n     * Memoized BreakPoint Lookups\n     */\n    this.findByMap = new Map();\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias) {\n    return !alias ? null : this.findWithPredicate(alias, bp => bp.alias === alias);\n  }\n  findByQuery(query) {\n    return this.findWithPredicate(query, bp => bp.mediaQuery === query);\n  }\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings() {\n    return this.items.filter(it => it.overlapping);\n  }\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases() {\n    return this.items.map(it => it.alias);\n  }\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes() {\n    return this.items.map(it => it?.suffix ?? '');\n  }\n  /**\n   * Memoized lookup using custom predicate function\n   */\n  findWithPredicate(key, searchFn) {\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) ?? null;\n      this.findByMap.set(key, response);\n    }\n    return response ?? null;\n  }\n  static #_ = this.ɵfac = function BreakPointRegistry_Factory(t) {\n    return new (t || BreakPointRegistry)(i0.ɵɵinject(BREAKPOINTS));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BreakPointRegistry,\n    factory: BreakPointRegistry.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreakPointRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [BREAKPOINTS]\n    }]\n  }], null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n  constructor(breakpoints, layoutConfig, _document) {\n    this.breakpoints = breakpoints;\n    this.layoutConfig = layoutConfig;\n    this._document = _document;\n    // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n    //  and `afterprint` event listeners.\n    this.registeredBeforeAfterPrintHooks = false;\n    // isPrintingBeforeAfterEvent is used to track if we are printing from within\n    // a `beforeprint` event handler. This prevents the typical `stopPrinting`\n    // form `interceptEvents` so that printing is not stopped while the dialog\n    // is still open. This is an extension of the `isPrinting` property on\n    // browsers which support `beforeprint` and `afterprint` events.\n    this.isPrintingBeforeAfterEvent = false;\n    this.beforePrintEventListeners = [];\n    this.afterPrintEventListeners = [];\n    this.formerActivations = null;\n    // Is this service currently in print mode\n    this.isPrinting = false;\n    this.queue = new PrintQueue();\n    this.deactivations = [];\n  }\n  /** Add 'print' mediaQuery: to listen for matchMedia activations */\n  withPrintQuery(queries) {\n    return [...queries, PRINT];\n  }\n  /** Is the MediaChange event for any 'print' @media */\n  isPrintEvent(e) {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n  /** What is the desired mqAlias to use while printing? */\n  get printAlias() {\n    return [...(this.layoutConfig.printWithBreakpoints ?? [])];\n  }\n  /** Lookup breakpoints associated with print aliases. */\n  get printBreakPoints() {\n    return this.printAlias.map(alias => this.breakpoints.findByAlias(alias)).filter(bp => bp !== null);\n  }\n  /** Lookup breakpoint associated with mediaQuery */\n  getEventBreakpoints({\n    mediaQuery\n  }) {\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n    return list.sort(sortDescendingPriority);\n  }\n  /** Update event with printAlias mediaQuery information */\n  updateEvent(event) {\n    let bp = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp?.mediaQuery ?? '';\n    }\n    return mergeAlias(event, bp);\n  }\n  // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n  registerBeforeAfterPrintHooks(target) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n    this.registeredBeforeAfterPrintHooks = true;\n    const beforePrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n    const afterPrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    };\n    // Could we have teardown logic to remove if there are no print listeners being used?\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n  /**\n   * Prepare RxJS tap operator with partial application\n   * @return pipeable tap predicate\n   */\n  interceptEvents(target) {\n    return event => {\n      if (this.isPrintEvent(event)) {\n        if (event.matches && !this.isPrinting) {\n          this.startPrinting(target, this.getEventBreakpoints(event));\n          target.updateStyles();\n        } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n          this.stopPrinting(target);\n          target.updateStyles();\n        }\n        return;\n      }\n      this.collectActivations(target, event);\n    };\n  }\n  /** Stop mediaChange event propagation in event streams */\n  blockPropagation() {\n    return event => {\n      return !(this.isPrinting || this.isPrintEvent(event));\n    };\n  }\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   */\n  startPrinting(target, bpList) {\n    this.isPrinting = true;\n    this.formerActivations = target.activatedBreakpoints;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n  /** For any print de-activations, reset the entire print queue */\n  stopPrinting(target) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.formerActivations = null;\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   */\n  collectActivations(target, event) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise, this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n        return;\n      }\n      if (!event.matches) {\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        // Deactivating a breakpoint\n        if (bp) {\n          const hasFormerBp = this.formerActivations && this.formerActivations.includes(bp);\n          const wasActivated = !this.formerActivations && target.activatedBreakpoints.includes(bp);\n          const shouldDeactivate = hasFormerBp || wasActivated;\n          if (shouldDeactivate) {\n            this.deactivations.push(bp);\n            this.deactivations.sort(sortDescendingPriority);\n          }\n        }\n      }\n    }\n  }\n  /** Teardown logic for the service. */\n  ngOnDestroy() {\n    if (this._document.defaultView) {\n      this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n      this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n    }\n  }\n  static #_ = this.ɵfac = function PrintHook_Factory(t) {\n    return new (t || PrintHook)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(LAYOUT_CONFIG), i0.ɵɵinject(DOCUMENT));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PrintHook,\n    factory: PrintHook.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PrintHook, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: BreakPointRegistry\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LAYOUT_CONFIG]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }], null);\n})();\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  constructor() {\n    /** Sorted queue with prioritized print breakpoints */\n    this.printBreakpoints = [];\n  }\n  addPrintBreakpoints(bpList) {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(bp => this.addBreakpoint(bp));\n    return this.printBreakpoints;\n  }\n  /** Add Print breakpoint to queue */\n  addBreakpoint(bp) {\n    if (!!bp) {\n      const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints] : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n  /** Restore original activated breakpoints and clear internal caches */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp) {\n  return bp?.mediaQuery.startsWith(PRINT) ?? false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n  get activatedAlias() {\n    return this.activatedBreakpoints[0]?.alias ?? '';\n  }\n  set activatedBreakpoints(bps) {\n    this._activatedBreakpoints = [...bps];\n  }\n  get activatedBreakpoints() {\n    return [...this._activatedBreakpoints];\n  }\n  set useFallbacks(value) {\n    this._useFallbacks = value;\n  }\n  constructor(matchMedia, breakpoints, hook) {\n    this.matchMedia = matchMedia;\n    this.breakpoints = breakpoints;\n    this.hook = hook;\n    this._useFallbacks = true;\n    this._activatedBreakpoints = [];\n    this.elementMap = new Map();\n    this.elementKeyMap = new WeakMap();\n    this.watcherMap = new WeakMap(); // special triggers to update elements\n    this.updateMap = new WeakMap(); // callback functions to update styles\n    this.clearMap = new WeakMap(); // callback functions to clear styles\n    this.subject = new Subject();\n    this.observeActivations();\n  }\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param mc\n   */\n  onMediaChange(mc) {\n    const bp = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n      const bpIndex = this.activatedBreakpoints.indexOf(bp);\n      if (mc.matches && bpIndex === -1) {\n        this._activatedBreakpoints.push(bp);\n        this._activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      } else if (!mc.matches && bpIndex !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this._activatedBreakpoints.splice(bpIndex, 1);\n        this._activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      }\n    }\n  }\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param element\n   * @param key\n   * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   */\n  init(element, key, updateFn, clearFn, extraTriggers = []) {\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param element\n   * @param key\n   * @param bp\n   */\n  getValue(element, key, bp) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n  /**\n   * whether the element has values for a given key\n   * @param element\n   * @param key\n   */\n  hasValue(element, key) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n  /**\n   * Set the value for an input on a directive\n   * @param element the element in question\n   * @param key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param bp the breakpoint suffix (empty string = default)\n   * @param val the value for the breakpoint\n   */\n  setValue(element, key, val, bp) {\n    let bpMap = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      const values = (bpMap.get(bp) ?? new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n  /** Track element value changes for a specific key */\n  trackValue(element, key) {\n    return this.subject.asObservable().pipe(filter(v => v.element === element && v.key === key));\n  }\n  /** update all styles for all elements on the current breakpoint */\n  updateStyles() {\n    this.elementMap.forEach((bpMap, el) => {\n      const keyMap = new Set(this.elementKeyMap.get(el));\n      let valueMap = this.getActivatedValues(bpMap);\n      if (valueMap) {\n        valueMap.forEach((v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n      keyMap.forEach(k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n    });\n  }\n  /**\n   * clear the styles for a given element\n   * @param element\n   * @param key\n   */\n  clearElement(element, key) {\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      const clearFn = builders.get(key);\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({\n          element,\n          key,\n          value: ''\n        });\n      }\n    }\n  }\n  /**\n   * update a given element with the activated values for a given key\n   * @param element\n   * @param key\n   * @param value\n   */\n  updateElement(element, key, value) {\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      const updateFn = builders.get(key);\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({\n          element,\n          key,\n          value\n        });\n      }\n    }\n  }\n  /**\n   * release all references to a given element\n   * @param element\n   */\n  releaseElement(element) {\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach((_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param element\n   * @param key\n   */\n  triggerUpdate(element, key) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach((v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n  /** Cross-reference for HTMLElement with directive key */\n  buildElementKeyMap(element, key) {\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   */\n  watchExtraTriggers(element, key, triggers) {\n    if (triggers && triggers.length) {\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        const newSubscription = merge(...triggers).subscribe(() => {\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n  /** Breakpoint locator by mediaQuery */\n  findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @param bpMap\n   * @param key\n   */\n  getActivatedValues(bpMap, key) {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      const activatedBp = this.activatedBreakpoints[i];\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || valueMap.has(key) && valueMap.get(key) != null) {\n          return valueMap;\n        }\n      }\n    }\n    // On the server, we explicitly have an \"all\" section filled in to begin with.\n    // So we don't need to aggressively find a fallback if no explicit value exists.\n    if (!this._useFallbacks) {\n      return undefined;\n    }\n    const lastHope = bpMap.get('');\n    return key === undefined || lastHope && lastHope.has(key) ? lastHope : undefined;\n  }\n  /**\n   * Watch for mediaQuery breakpoint activations\n   */\n  observeActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    this.hook.registerBeforeAfterPrintHooks(this);\n    this.matchMedia.observe(this.hook.withPrintQuery(queries)).pipe(tap(this.hook.interceptEvents(this)), filter(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this));\n  }\n  static #_ = this.ɵfac = function MediaMarshaller_Factory(t) {\n    return new (t || MediaMarshaller)(i0.ɵɵinject(MatchMedia), i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(PrintHook));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MediaMarshaller,\n    factory: MediaMarshaller.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaMarshaller, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: MatchMedia\n  }, {\n    type: BreakPointRegistry\n  }, {\n    type: PrintHook\n  }], null);\n})();\nfunction initBuilderMap(map, element, key, input) {\n  if (input !== undefined) {\n    const oldMap = map.get(element) ?? new Map();\n    oldMap.set(key, input);\n    map.set(element, oldMap);\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BaseDirective2 {\n  /** Access to host element's parent DOM node */\n  get parentElement() {\n    return this.elementRef.nativeElement.parentElement;\n  }\n  /** Access to the HTMLElement for the directive */\n  get nativeElement() {\n    return this.elementRef.nativeElement;\n  }\n  /** Access to the activated value for the directive */\n  get activatedValue() {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  set activatedValue(value) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n  }\n  constructor(elementRef, styleBuilder, styler, marshal) {\n    this.elementRef = elementRef;\n    this.styleBuilder = styleBuilder;\n    this.styler = styler;\n    this.marshal = marshal;\n    this.DIRECTIVE_KEY = '';\n    this.inputs = [];\n    /** The most recently used styles for the builder */\n    this.mru = {};\n    this.destroySubject = new Subject();\n    /** Cache map for style computation */\n    this.styleCache = new Map();\n  }\n  /** For @Input changes */\n  ngOnChanges(changes) {\n    Object.keys(changes).forEach(key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        const bp = key.split('.').slice(1).join('.');\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n  /** Register with central marshaller service */\n  init(extraTriggers = []) {\n    this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n  }\n  /** Add styles to the element using predefined style builder */\n  addStyles(input, parent) {\n    const builder = this.styleBuilder;\n    const useCache = builder.shouldCache;\n    let genStyles = this.styleCache.get(input);\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n    this.mru = {\n      ...genStyles\n    };\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n  /** Remove generated styles from an element using predefined style builder */\n  clearStyles() {\n    Object.keys(this.mru).forEach(k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n    this.currentValue = undefined;\n  }\n  /** Force trigger style updates on DOM element */\n  triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  getFlexFlowDirection(target, addIfMissing = false) {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n      return value.trim();\n    }\n    return 'row';\n  }\n  hasWrap(target) {\n    return this.styler.hasWrap(target);\n  }\n  /** Applies styles given via string pair or object map to the directive element */\n  applyStyleToElement(style, value, element = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n  setValue(val, bp) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n  updateWithValue(input) {\n    if (this.currentValue !== input) {\n      this.addStyles(input);\n      this.currentValue = input;\n    }\n  }\n  static #_ = this.ɵfac = function BaseDirective2_Factory(t) {\n    return new (t || BaseDirective2)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(StyleBuilder), i0.ɵɵdirectiveInject(StyleUtils), i0.ɵɵdirectiveInject(MediaMarshaller));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseDirective2,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseDirective2, [{\n    type: Directive\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: StyleBuilder\n  }, {\n    type: StyleUtils\n  }, {\n    type: MediaMarshaller\n  }], null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n  constructor(_zone, _platformId, _document, _breakpoints) {\n    super(_zone, _platformId, _document);\n    this._document = _document;\n    this._breakpoints = _breakpoints;\n    this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n    this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n  }\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this.registry.forEach(mql => {\n      mql.destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery, useOverlaps = this.useOverlaps) {\n    mediaQuery = this._validateQuery(mediaQuery);\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n    return this.hasActivated;\n  }\n  setNonce(nonce) {\n    super._nonce = nonce;\n  }\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias) {\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return bp?.mediaQuery ?? queryOrAlias;\n  }\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  _activateWithOverlaps(mediaQuery, useOverlaps) {\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      const alias = bp?.alias ?? 'unknown';\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg':\n          this._activateByAlias(['lt-xl']);\n          break;\n        case 'md':\n          this._activateByAlias(['lt-xl', 'lt-lg']);\n          break;\n        case 'sm':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n          break;\n        case 'xs':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n          break;\n      }\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl':\n          this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'lg':\n          this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'md':\n          this._activateByAlias(['gt-sm', 'gt-xs']);\n          break;\n        case 'sm':\n          this._activateByAlias(['gt-xs']);\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n  /**\n   *\n   */\n  _activateByAlias(aliases) {\n    const activate = alias => {\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp?.mediaQuery ?? alias);\n    };\n    aliases.forEach(activate);\n  }\n  /**\n   *\n   */\n  _activateByQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this._registerMediaQuery(mediaQuery);\n    }\n    const mql = this.registry.get(mediaQuery);\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n    return this.hasActivated;\n  }\n  /** Deactivate all current MQLs and reset the buffer */\n  _deactivateAll() {\n    this.registry.forEach(it => {\n      it.deactivate();\n    });\n    return this;\n  }\n  /** Insure the mediaQuery is registered with MatchMedia */\n  _registerMediaQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  buildMQL(query) {\n    return new MockMediaQueryList(query);\n  }\n  get hasActivated() {\n    return this.activations.length > 0;\n  }\n  static #_ = this.ɵfac = function MockMatchMedia_Factory(t) {\n    return new (t || MockMatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(BreakPointRegistry));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MockMatchMedia,\n    factory: MockMatchMedia.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockMatchMedia, [{\n    type: Injectable\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: BreakPointRegistry\n  }], null);\n})();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList extends EventTarget {\n  get matches() {\n    return this._isActive;\n  }\n  get media() {\n    return this._mediaQuery;\n  }\n  constructor(_mediaQuery) {\n    super();\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /** Notify all listeners that 'matches === TRUE' */\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /** Notify all listeners that 'matches === false' */\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /** Add a listener to our internal list to activate later */\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb = listener;\n      cb.call(this, {\n        matches: this.matches,\n        media: this.media\n      });\n    }\n  }\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_) {}\n  dispatchEvent(_) {\n    return false;\n  }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nconst MockMatchMediaProvider = {\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Wraps the provided value in an array, unless the provided value is an array. */\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@ngbracket/ngx-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n  constructor(breakpoints, matchMedia, hook) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.hook = hook;\n    /** Filter MediaChange notifications for overlapping breakpoints */\n    this.filterOverlaps = false;\n    this.destroyed$ = new Subject();\n    this._media$ = this.watchActivations();\n  }\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  // ************************************************\n  // Public Methods\n  // ************************************************\n  /**\n   * Observe changes to current activation 'list'\n   */\n  asObservable() {\n    return this._media$;\n  }\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param value One or more media queries (or aliases) to check.\n   * @returns Whether any of the media queries match.\n   */\n  isActive(value) {\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(alias => {\n      const query = toMediaQuery(alias, this.breakpoints);\n      return query !== null && this.matchMedia.isActive(query);\n    });\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  watchActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  buildObservable(mqList) {\n    const hasChanges = changes => {\n      const isValidQuery = change => change.mediaQuery.length > 0;\n      return changes.filter(isValidQuery).length > 0;\n    };\n    const excludeOverlaps = changes => {\n      return !this.filterOverlaps ? changes : changes.filter(change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return bp?.overlapping ?? true;\n      });\n    };\n    const ignoreDuplicates = (previous, current) => {\n      if (previous.length !== current.length) {\n        return false;\n      }\n      const previousMqs = previous.map(mc => mc.mediaQuery);\n      const currentMqs = new Set(current.map(mc => mc.mediaQuery));\n      const difference = new Set(previousMqs.filter(mq => !currentMqs.has(mq)));\n      return difference.size === 0;\n    };\n    /**\n     */\n    return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter(change => change.matches), debounceTime(0, asapScheduler), switchMap(_ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), distinctUntilChanged(ignoreDuplicates), takeUntil(this.destroyed$));\n  }\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   */\n  findAllActivations() {\n    const mergeMQAlias = change => {\n      const bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    const replaceWithPrintAlias = change => this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    return this.matchMedia.activations.map(query => new MediaChange(true, query)).map(replaceWithPrintAlias).map(mergeMQAlias).sort(sortDescendingPriority);\n  }\n  static #_ = this.ɵfac = function MediaObserver_Factory(t) {\n    return new (t || MediaObserver)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(MatchMedia), i0.ɵɵinject(PrintHook));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MediaObserver,\n    factory: MediaObserver.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: BreakPointRegistry\n  }, {\n    type: MatchMedia\n  }, {\n    type: PrintHook\n  }], null);\n})();\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query, locator) {\n  const bp = locator.findByAlias(query) ?? locator.findByQuery(query);\n  return bp?.mediaQuery ?? null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n  return queries.flatMap(query => query.split(',')).map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class\n */\nclass MediaTrigger {\n  constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.layoutConfig = layoutConfig;\n    this._platformId = _platformId;\n    this._document = _document;\n    this.hasCachedRegistryMatches = false;\n    this.originalActivations = [];\n    this.originalRegistry = new Map();\n  }\n  /**\n   * Manually activate range of breakpoints\n   * @param list array of mediaQuery or alias strings\n   */\n  activate(list) {\n    list = list.map(it => it.trim()); // trim queries\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n    this.prepareAutoRestore();\n  }\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   */\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      const extractQuery = change => change.mediaQuery;\n      const list = this.originalActivations.map(extractQuery);\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n      } finally {\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   */\n  prepareAutoRestore() {\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n    if (enableAutoRestore) {\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   */\n  deactivateAll() {\n    const list = this.currentActivations;\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   */\n  saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      const toMediaChange = query => new MediaChange(true, query);\n      const mergeMQAlias = change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n      this.originalActivations = this.currentActivations.map(toMediaChange).map(mergeMQAlias).sort(sortDescendingPriority);\n      this.cacheRegistryMatches();\n    }\n  }\n  /**\n   * Force set manual activations for specified mediaQuery list\n   */\n  setActivations(list) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   */\n  simulateMediaChanges(queries, matches = true) {\n    const toMediaQuery = query => {\n      const locator = this.breakpoints;\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    const emitChangeEvent = query => this.emitChangeEvent(matches, query);\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   */\n  forceRegistryMatches(queries, matches) {\n    const registry = new Map();\n    queries.forEach(query => {\n      registry.set(query, {\n        matches\n      });\n    });\n    this.matchMedia.registry = registry;\n  }\n  /**\n   * Save current MatchMedia::registry items.\n   */\n  cacheRegistryMatches() {\n    const target = this.originalRegistry;\n    target.clear();\n    this.matchMedia.registry.forEach((value, key) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n  /**\n   * Restore original, 'true' registry\n   */\n  restoreRegistryMatches() {\n    const target = this.matchMedia.registry;\n    target.clear();\n    this.originalRegistry.forEach((value, key) => {\n      target.set(key, value);\n    });\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   */\n  emitChangeEvent(matches, query) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n  get currentActivations() {\n    return this.matchMedia.activations;\n  }\n  static #_ = this.ɵfac = function MediaTrigger_Factory(t) {\n    return new (t || MediaTrigger)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(MatchMedia), i0.ɵɵinject(LAYOUT_CONFIG), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MediaTrigger,\n    factory: MediaTrigger.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaTrigger, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: BreakPointRegistry\n  }, {\n    type: MatchMedia\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LAYOUT_CONFIG]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }], null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n  let parts = [grow, shrink, basis];\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = matches.length === 3 ? matches : [grow, shrink, basis];\n  }\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\nconst MULTIPLIER_SUFFIX = 'x';\nfunction multiply(value, multiplier) {\n  if (multiplier === undefined) {\n    return value;\n  }\n  const transformValue = possibleValue => {\n    const numberValue = +possibleValue.slice(0, -MULTIPLIER_SUFFIX.length);\n    if (value.endsWith(MULTIPLIER_SUFFIX) && !isNaN(numberValue)) {\n      return `${numberValue * multiplier.value}${multiplier.unit}`;\n    }\n    return value;\n  };\n  return value.includes(' ') ? value.split(' ').map(transformValue).join(' ') : transformValue(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, multiply as ɵmultiply };","map":{"version":3,"names":["i0","APP_BOOTSTRAP_LISTENER","PLATFORM_ID","NgModule","Injectable","InjectionToken","Inject","CSP_NONCE","Optional","inject","Directive","isPlatformBrowser","DOCUMENT","isPlatformServer","BehaviorSubject","Observable","merge","Subject","asapScheduler","of","fromEvent","applyCssPrefixes","extendObject","buildLayoutCSS","filter","tap","debounceTime","switchMap","map","distinctUntilChanged","takeUntil","take","removeStyles","_document","platformId","elements","Array","from","querySelectorAll","CLASS_NAME","classRegex","forEach","el","classList","contains","parentNode","removeChild","className","replace","BROWSER_PROVIDER","provide","useFactory","deps","multi","CoreModule","_","ɵfac","CoreModule_Factory","t","_2","ɵmod","ɵɵdefineNgModule","type","_3","ɵinj","ɵɵdefineInjector","providers","ngDevMode","ɵsetClassMetadata","args","MediaChange","constructor","matches","mediaQuery","mqAlias","suffix","priority","property","clone","StylesheetMap","stylesheet","Map","addStyleToElement","element","style","value","get","set","clearStyles","clear","getStyleForElement","styleName","styles","StylesheetMap_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","mediaTriggerAutoRestore","ssrObserveBreakpoints","multiplier","undefined","defaultUnit","detectLayoutDisplay","LAYOUT_CONFIG","SERVER_TOKEN","BREAKPOINT","mergeAlias","dest","source","alias","StyleBuilder","shouldCache","sideEffect","_input","_styles","_parent","StyleUtils","_serverStylesheet","_serverModuleLoaded","_platformId","layoutConfig","applyStyleToElement","_applyMultiValueStyleToElement","applyStyleToElements","getFlowDirection","target","query","lookupStyle","hasInlineValue","lookupInlineStyle","hasWrap","lookupAttributeValue","attribute","getAttribute","getPropertyValue","getServerStyle","inlineOnly","immediateValue","getComputedStyle","trim","Object","keys","sort","key","values","isArray","setProperty","setServerStyle","StyleUtils_Factory","ɵɵinject","decorators","styleMap","readStyleAttribute","styleValue","toLowerCase","writeStyleAttribute","styleAttrValue","newValue","setAttribute","styleAttribute","styleList","split","i","length","colonIndex","indexOf","Error","name","substr","sortDescendingPriority","a","b","priorityA","priorityB","sortAscendingPriority","pA","pB","MatchMedia","_zone","_nonce","registry","pendingRemoveListenerFns","_observable$","asObservable","activations","results","mql","push","isActive","registerQuery","some","m","observe","mqList","filterOthers","matchMedia$","pipe","change","registration$","observer","lastChange","pop","e","next","complete","list","buildQueryCss","onMQLEvent","run","buildMQL","addListener","removeListener","ngOnDestroy","fn","constructMql","MatchMedia_Factory","NgZone","ALL_STYLES","mediaQueries","it","join","styleEl","createElement","styleSheet","cssText","appendChild","createTextNode","head","mq","console","error","buildMockMql","et","EventTarget","media","addEventListener","dispatchEvent","onchange","isBrowser","canListen","window","matchMedia","ALIAS_DELIMITERS","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","validateSuffixes","bp","overlapping","mergeByAlias","defaults","custom","dict","k","DEFAULT_BREAKPOINTS","HANDSET_PORTRAIT","HANDSET_LANDSCAPE","TABLET_PORTRAIT","TABLET_LANDSCAPE","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","ORIENTATION_BREAKPOINTS","HANDSET","TABLET","WEB","BREAKPOINTS","breakpoints","bpFlattenArray","concat","apply","v","builtIns","BreakPointRegistry","findByMap","items","findByAlias","findWithPredicate","findByQuery","overlappings","aliases","suffixes","searchFn","response","find","BreakPointRegistry_Factory","PRINT","BREAKPOINT_PRINT","PrintHook","registeredBeforeAfterPrintHooks","isPrintingBeforeAfterEvent","beforePrintEventListeners","afterPrintEventListeners","formerActivations","isPrinting","queue","PrintQueue","deactivations","withPrintQuery","queries","isPrintEvent","startsWith","printAlias","printBreakPoints","getEventBreakpoints","updateEvent","event","registerBeforeAfterPrintHooks","defaultView","beforePrintListener","startPrinting","updateStyles","afterPrintListener","stopPrinting","interceptEvents","collectActivations","blockPropagation","bpList","activatedBreakpoints","addPrintBreakpoints","hasFormerBp","includes","wasActivated","shouldDeactivate","l","removeEventListener","PrintHook_Factory","printBreakpoints","addBreakpoint","bpInList","isPrintBreakPoint","MediaMarshaller","activatedAlias","bps","_activatedBreakpoints","useFallbacks","_useFallbacks","hook","elementMap","elementKeyMap","WeakMap","watcherMap","updateMap","clearMap","subject","observeActivations","onMediaChange","mc","bpIndex","splice","init","updateFn","clearFn","extraTriggers","initBuilderMap","buildElementKeyMap","watchExtraTriggers","getValue","bpMap","getActivatedValues","hasValue","setValue","val","updateElement","trackValue","keyMap","Set","valueMap","delete","clearElement","builders","releaseElement","s","unsubscribe","triggerUpdate","add","triggers","watchers","subscription","newSubscription","subscribe","currentValue","activatedBp","has","lastHope","bind","MediaMarshaller_Factory","input","oldMap","BaseDirective2","parentElement","elementRef","nativeElement","activatedValue","marshal","DIRECTIVE_KEY","styleBuilder","styler","inputs","mru","destroySubject","styleCache","ngOnChanges","changes","updateWithValue","addStyles","parent","builder","useCache","genStyles","buildStyles","getFlexFlowDirection","addIfMissing","BaseDirective2_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","features","ɵɵNgOnChangesFeature","MockMatchMedia","_breakpoints","autoRegisterQueries","useOverlaps","clearAll","destroy","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","setNonce","nonce","queryOrAlias","_activateByAlias","_activateByQuery","deactivate","MockMediaQueryList","MockMatchMedia_Factory","_isActive","_mediaQuery","_listeners","callback","cb","call","listener","MockMatchMediaProvider","useClass","coerceArray","MediaObserver","filterOverlaps","destroyed$","_media$","watchActivations","splitQueries","toMediaQuery","buildObservable","hasChanges","isValidQuery","excludeOverlaps","ignoreDuplicates","previous","current","previousMqs","currentMqs","difference","size","findAllActivations","mergeMQAlias","replaceWithPrintAlias","MediaObserver_Factory","locator","flatMap","MediaTrigger","hasCachedRegistryMatches","originalActivations","originalRegistry","saveActivations","deactivateAll","setActivations","prepareAutoRestore","restore","extractQuery","restoreRegistryMatches","resizeSubscription","enableAutoRestore","resize$","currentActivations","forceRegistryMatches","simulateMediaChanges","toMediaChange","cacheRegistryMatches","emitChangeEvent","MediaTrigger_Factory","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","calc","MULTIPLIER_SUFFIX","multiply","transformValue","possibleValue","numberValue","endsWith","isNaN","unit","ɵMatchMedia","ɵMockMatchMedia","ɵMockMatchMediaProvider","ɵmultiply"],"sources":["/Users/sergio/Documents/admin-nichos/administrador-nichos/node_modules/@ngbracket/ngx-layout/fesm2022/ngbracket-ngx-layout-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, CSP_NONCE, Optional, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@ngbracket/ngx-layout/_private-utils';\nimport { filter, tap, debounceTime, switchMap, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nfunction removeStyles(_document, platformId) {\n    return () => {\n        if (isPlatformBrowser(platformId)) {\n            const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n            // RegExp constructor should only be used if passing a variable to the constructor.\n            // When using static regular expression it is more performant to use reg exp literal.\n            // This is also needed to provide Safari 9 compatibility, please see\n            // https://stackoverflow.com/questions/37919802 for more discussion.\n            const classRegex = /\\bflex-layout-.+?\\b/g;\n            elements.forEach(el => {\n                el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n            });\n        }\n    };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nconst BROWSER_PROVIDER = {\n    provide: APP_BOOTSTRAP_LISTENER,\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: CoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: CoreModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: CoreModule, providers: [BROWSER_PROVIDER] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: CoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [BROWSER_PROVIDER]\n                }]\n        }] });\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n    /**\n     * @param matches whether the mediaQuery is currently activated\n     * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n     * @param mqAlias e.g. gt-sm, md, gt-lg\n     * @param suffix e.g. GtSM, Md, GtLg\n     * @param priority the priority of activation for the given breakpoint\n     */\n    constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n        this.priority = priority;\n        this.property = '';\n    }\n    /** Create an exact copy of the MediaChange */\n    clone() {\n        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n    constructor() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     */\n    addStyleToElement(element, style, value) {\n        const stylesheet = this.stylesheet.get(element);\n        if (stylesheet) {\n            stylesheet.set(style, value);\n        }\n        else {\n            this.stylesheet.set(element, new Map([[style, value]]));\n        }\n    }\n    /**\n     * Clear the virtual stylesheet\n     */\n    clearStyles() {\n        this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     */\n    getStyleForElement(el, styleName) {\n        const styles = this.stylesheet.get(el);\n        let value = '';\n        if (styles) {\n            const style = styles.get(styleName);\n            if (typeof style === 'number' || typeof style === 'string') {\n                value = style + '';\n            }\n        }\n        return value;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: StylesheetMap, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: StylesheetMap, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: StylesheetMap, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n    printWithBreakpoints: [],\n    mediaTriggerAutoRestore: true,\n    ssrObserveBreakpoints: [],\n    // This is disabled by default because otherwise the multiplier would\n    // run for all users, regardless of whether they're using this feature.\n    // Instead, we disable it by default, which requires this ugly cast.\n    multiplier: undefined,\n    defaultUnit: 'px',\n    detectLayoutDisplay: false,\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nfunction mergeAlias(dest, source) {\n    dest = dest?.clone() ?? new MediaChange();\n    if (source) {\n        dest.mqAlias = source.alias;\n        dest.mediaQuery = source.mediaQuery;\n        dest.suffix = source.suffix;\n        dest.priority = source.priority;\n    }\n    return dest;\n}\n\n/** A class that encapsulates CSS style generation for common directives */\nclass StyleBuilder {\n    constructor() {\n        /** Whether to cache the generated output styles */\n        this.shouldCache = true;\n    }\n    /**\n     * Run a side effect computation given the input string and the computed styles\n     * from the build task and the host configuration object\n     * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n     */\n    sideEffect(_input, _styles, _parent) {\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleUtils {\n    constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     */\n    applyStyleToElement(element, style, value = null) {\n        let styles = {};\n        if (typeof style === 'string') {\n            styles[style] = value;\n            style = styles;\n        }\n        styles = this.layoutConfig.disableVendorPrefixes\n            ? style\n            : applyCssPrefixes(style);\n        this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     */\n    applyStyleToElements(style, elements = []) {\n        const styles = this.layoutConfig.disableVendorPrefixes\n            ? style\n            : applyCssPrefixes(style);\n        elements.forEach((el) => {\n            this._applyMultiValueStyleToElement(styles, el);\n        });\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     */\n    getFlowDirection(target) {\n        const query = 'flex-direction';\n        let value = this.lookupStyle(target, query);\n        const hasInlineValue = this.lookupInlineStyle(target, query) ||\n            (isPlatformServer(this._platformId) && this._serverModuleLoaded)\n            ? value\n            : '';\n        return [value || 'row', hasInlineValue];\n    }\n    hasWrap(target) {\n        const query = 'flex-wrap';\n        return this.lookupStyle(target, query) === 'wrap';\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     */\n    lookupAttributeValue(element, attribute) {\n        return element.getAttribute(attribute) ?? '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     */\n    lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId)\n            ? element.style.getPropertyValue(styleName)\n            : getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     */\n    lookupStyle(element, styleName, inlineOnly = false) {\n        let value = '';\n        if (element) {\n            let immediateValue = (value = this.lookupInlineStyle(element, styleName));\n            if (!immediateValue) {\n                if (isPlatformBrowser(this._platformId)) {\n                    if (!inlineOnly) {\n                        value = getComputedStyle(element).getPropertyValue(styleName);\n                    }\n                }\n                else {\n                    if (this._serverModuleLoaded) {\n                        value = this._serverStylesheet.getStyleForElement(element, styleName);\n                    }\n                }\n            }\n        }\n        // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n        return value ? value.trim() : '';\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     */\n    _applyMultiValueStyleToElement(styles, element) {\n        Object.keys(styles)\n            .sort()\n            .forEach((key) => {\n            const el = styles[key];\n            const values = Array.isArray(el)\n                ? el\n                : [el];\n            values.sort();\n            for (let value of values) {\n                value = value ? value + '' : '';\n                if (isPlatformBrowser(this._platformId) ||\n                    !this._serverModuleLoaded) {\n                    isPlatformBrowser(this._platformId)\n                        ? element.style.setProperty(key, value)\n                        : setServerStyle(element, key, value);\n                }\n                else {\n                    this._serverStylesheet.addStyleToElement(element, key, value);\n                }\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: StyleUtils, deps: [{ token: StylesheetMap }, { token: SERVER_TOKEN }, { token: PLATFORM_ID }, { token: LAYOUT_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: StyleUtils, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: StyleUtils, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: StylesheetMap }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SERVER_TOKEN]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }] });\nfunction getServerStyle(element, styleName) {\n    const styleMap = readStyleAttribute(element);\n    return styleMap[styleName] ?? '';\n}\nfunction setServerStyle(element, styleName, styleValue) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = readStyleAttribute(element);\n    styleMap[styleName] = styleValue ?? '';\n    writeStyleAttribute(element, styleMap);\n}\nfunction writeStyleAttribute(element, styleMap) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n        const newValue = styleMap[key];\n        if (newValue) {\n            styleAttrValue += `${key}:${styleMap[key]};`;\n        }\n    }\n    element.setAttribute('style', styleAttrValue);\n}\nfunction readStyleAttribute(element) {\n    const styleMap = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n        const styleList = styleAttribute.split(/;+/g);\n        for (let i = 0; i < styleList.length; i++) {\n            const style = styleList[i].trim();\n            if (style.length > 0) {\n                const colonIndex = style.indexOf(':');\n                if (colonIndex === -1) {\n                    throw new Error(`Invalid CSS style: ${style}`);\n                }\n                const name = style.substr(0, colonIndex).trim();\n                styleMap[name] = style.substr(colonIndex + 1).trim();\n            }\n        }\n    }\n    return styleMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** HOF to sort the breakpoints by descending priority */\nfunction sortDescendingPriority(a, b) {\n    const priorityA = a ? a.priority || 0 : 0;\n    const priorityB = b ? b.priority || 0 : 0;\n    return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\nfunction sortAscendingPriority(a, b) {\n    const pA = a.priority || 0;\n    const pB = b.priority || 0;\n    return pA - pB;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n    constructor(_zone, _platformId, _document, _nonce) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        this._nonce = _nonce;\n        /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n        this.source = new BehaviorSubject(new MediaChange(true));\n        this.registry = new Map();\n        this.pendingRemoveListenerFns = [];\n        this._observable$ = this.source.asObservable();\n    }\n    /**\n     * Publish list of all current activations\n     */\n    get activations() {\n        const results = [];\n        this.registry.forEach((mql, key) => {\n            if (mql.matches) {\n                results.push(key);\n            }\n        });\n        return results;\n    }\n    /**\n     * For the specified mediaQuery?\n     */\n    isActive(mediaQuery) {\n        const mql = this.registry.get(mediaQuery);\n        return (mql?.matches ?? this.registerQuery(mediaQuery).some((m) => m.matches));\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * Use deferred registration process to register breakpoints only on subscription\n     * This logic also enforces logic to register all mediaQueries BEFORE notify\n     * subscribers of notifications.\n     */\n    observe(mqList, filterOthers = false) {\n        if (mqList && mqList.length) {\n            const matchMedia$ = this._observable$.pipe(filter((change) => !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1));\n            const registration$ = new Observable((observer) => {\n                // tslint:disable-line:max-line-length\n                const matches = this.registerQuery(mqList);\n                if (matches.length) {\n                    const lastChange = matches.pop();\n                    matches.forEach((e) => {\n                        observer.next(e);\n                    });\n                    this.source.next(lastChange); // last match is cached\n                }\n                observer.complete();\n            });\n            return merge(registration$, matchMedia$);\n        }\n        return this._observable$;\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     */\n    registerQuery(mediaQuery) {\n        const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n        const matches = [];\n        buildQueryCss(list, this._document, this._nonce);\n        list.forEach((query) => {\n            const onMQLEvent = (e) => {\n                this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n            };\n            let mql = this.registry.get(query);\n            if (!mql) {\n                mql = this.buildMQL(query);\n                mql.addListener(onMQLEvent);\n                this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n                this.registry.set(query, mql);\n            }\n            if (mql.matches) {\n                matches.push(new MediaChange(true, query));\n            }\n        });\n        return matches;\n    }\n    ngOnDestroy() {\n        let fn;\n        while ((fn = this.pendingRemoveListenerFns.pop())) {\n            fn();\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return constructMql(query, isPlatformBrowser(this._platformId));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }, { token: CSP_NONCE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MatchMedia, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MatchMedia, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CSP_NONCE]\n                }] }] });\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries, _document, _nonce) {\n    const list = mediaQueries.filter((it) => !ALL_STYLES[it]);\n    if (list.length > 0) {\n        const query = list.join(', ');\n        try {\n            const styleEl = _document.createElement('style');\n            styleEl.setAttribute('type', 'text/css');\n            if (_nonce) {\n                styleEl.setAttribute('nonce', _nonce);\n            }\n            if (!styleEl.styleSheet) {\n                const cssText = `\n/*\n  @ngbracket/ngx-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n                styleEl.appendChild(_document.createTextNode(cssText));\n            }\n            _document.head.appendChild(styleEl);\n            // Store in private global registry\n            list.forEach((mq) => (ALL_STYLES[mq] = styleEl));\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nfunction buildMockMql(query) {\n    const et = new EventTarget();\n    et.matches = query === 'all' || query === '';\n    et.media = query;\n    et.addListener = () => { };\n    et.removeListener = () => { };\n    et.addEventListener = () => { };\n    et.dispatchEvent = () => false;\n    et.onchange = null;\n    return et;\n}\nfunction constructMql(query, isBrowser) {\n    const canListen = isBrowser && !!window.matchMedia('all').addListener;\n    return canListen ? window.matchMedia(query) : buildMockMql(query);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part) {\n    let first = part.length > 0 ? part.charAt(0) : '';\n    let remainder = part.length > 1 ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nfunction validateSuffixes(list) {\n    list.forEach((bp) => {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    });\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nfunction mergeByAlias(defaults, custom = []) {\n    const dict = {};\n    defaults.forEach((bp) => {\n        dict[bp.alias] = bp;\n    });\n    // Merge custom breakpoints\n    custom.forEach((bp) => {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    });\n    return validateSuffixes(Object.keys(dict).map((k) => dict[k]));\n}\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n        priority: 1000,\n    },\n    {\n        alias: 'sm',\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n        priority: 900,\n    },\n    {\n        alias: 'md',\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n        priority: 800,\n    },\n    {\n        alias: 'lg',\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n        priority: 700,\n    },\n    {\n        alias: 'xl',\n        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n        priority: 600,\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 599.98px)',\n        priority: 950,\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 959.98px)',\n        priority: 850,\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 1279.98px)',\n        priority: 750,\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        priority: 650,\n        mediaQuery: 'screen and (max-width: 1919.98px)',\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 600px)',\n        priority: -950,\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 960px)',\n        priority: -850,\n    }, {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1280px)',\n        priority: -750,\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1920px)',\n        priority: -650,\n    }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n    'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n    'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n    'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n    'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n    'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n    'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n    'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n    'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n    'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nconst ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE },\n    { 'alias': 'tablet.portrait', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nconst BREAKPOINTS = new InjectionToken('Token (@ngbracket/ngx-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n        const breakpoints = inject(BREAKPOINT);\n        const layoutConfig = inject(LAYOUT_CONFIG);\n        const bpFlattenArray = [].concat.apply([], (breakpoints || []).map((v) => Array.isArray(v) ? v : [v]));\n        const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    },\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n    constructor(list) {\n        /**\n         * Memoized BreakPoint Lookups\n         */\n        this.findByMap = new Map();\n        this.items = [...list].sort(sortAscendingPriority);\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     */\n    findByAlias(alias) {\n        return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias === alias);\n    }\n    findByQuery(query) {\n        return this.findWithPredicate(query, (bp) => bp.mediaQuery === query);\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     */\n    get overlappings() {\n        return this.items.filter(it => it.overlapping);\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     */\n    get aliases() {\n        return this.items.map(it => it.alias);\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     */\n    get suffixes() {\n        return this.items.map(it => it?.suffix ?? '');\n    }\n    /**\n     * Memoized lookup using custom predicate function\n     */\n    findWithPredicate(key, searchFn) {\n        let response = this.findByMap.get(key);\n        if (!response) {\n            response = this.items.find(searchFn) ?? null;\n            this.findByMap.set(key, response);\n        }\n        return response ?? null;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: BreakPointRegistry, deps: [{ token: BREAKPOINTS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: BreakPointRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: BreakPointRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [BREAKPOINTS]\n                }] }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n    alias: PRINT,\n    mediaQuery: PRINT,\n    priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n    constructor(breakpoints, layoutConfig, _document) {\n        this.breakpoints = breakpoints;\n        this.layoutConfig = layoutConfig;\n        this._document = _document;\n        // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n        //  and `afterprint` event listeners.\n        this.registeredBeforeAfterPrintHooks = false;\n        // isPrintingBeforeAfterEvent is used to track if we are printing from within\n        // a `beforeprint` event handler. This prevents the typical `stopPrinting`\n        // form `interceptEvents` so that printing is not stopped while the dialog\n        // is still open. This is an extension of the `isPrinting` property on\n        // browsers which support `beforeprint` and `afterprint` events.\n        this.isPrintingBeforeAfterEvent = false;\n        this.beforePrintEventListeners = [];\n        this.afterPrintEventListeners = [];\n        this.formerActivations = null;\n        // Is this service currently in print mode\n        this.isPrinting = false;\n        this.queue = new PrintQueue();\n        this.deactivations = [];\n    }\n    /** Add 'print' mediaQuery: to listen for matchMedia activations */\n    withPrintQuery(queries) {\n        return [...queries, PRINT];\n    }\n    /** Is the MediaChange event for any 'print' @media */\n    isPrintEvent(e) {\n        return e.mediaQuery.startsWith(PRINT);\n    }\n    /** What is the desired mqAlias to use while printing? */\n    get printAlias() {\n        return [...(this.layoutConfig.printWithBreakpoints ?? [])];\n    }\n    /** Lookup breakpoints associated with print aliases. */\n    get printBreakPoints() {\n        return this.printAlias\n            .map(alias => this.breakpoints.findByAlias(alias))\n            .filter(bp => bp !== null);\n    }\n    /** Lookup breakpoint associated with mediaQuery */\n    getEventBreakpoints({ mediaQuery }) {\n        const bp = this.breakpoints.findByQuery(mediaQuery);\n        const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n        return list.sort(sortDescendingPriority);\n    }\n    /** Update event with printAlias mediaQuery information */\n    updateEvent(event) {\n        let bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (this.isPrintEvent(event)) {\n            // Reset from 'print' to first (highest priority) print breakpoint\n            bp = this.getEventBreakpoints(event)[0];\n            event.mediaQuery = bp?.mediaQuery ?? '';\n        }\n        return mergeAlias(event, bp);\n    }\n    // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n    // trigger print styles synchronously and apply proper layout styles.\n    // It is a noop if the hooks have already been registered or if the document's\n    // `defaultView` is not available.\n    registerBeforeAfterPrintHooks(target) {\n        // `defaultView` may be null when rendering on the server or in other contexts.\n        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n            return;\n        }\n        this.registeredBeforeAfterPrintHooks = true;\n        const beforePrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            if (!this.isPrinting) {\n                this.isPrintingBeforeAfterEvent = true;\n                this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n                target.updateStyles();\n            }\n        };\n        const afterPrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            this.isPrintingBeforeAfterEvent = false;\n            if (this.isPrinting) {\n                this.stopPrinting(target);\n                target.updateStyles();\n            }\n        };\n        // Could we have teardown logic to remove if there are no print listeners being used?\n        this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n        this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n        this.beforePrintEventListeners.push(beforePrintListener);\n        this.afterPrintEventListeners.push(afterPrintListener);\n    }\n    /**\n     * Prepare RxJS tap operator with partial application\n     * @return pipeable tap predicate\n     */\n    interceptEvents(target) {\n        return (event) => {\n            if (this.isPrintEvent(event)) {\n                if (event.matches && !this.isPrinting) {\n                    this.startPrinting(target, this.getEventBreakpoints(event));\n                    target.updateStyles();\n                }\n                else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n                    this.stopPrinting(target);\n                    target.updateStyles();\n                }\n                return;\n            }\n            this.collectActivations(target, event);\n        };\n    }\n    /** Stop mediaChange event propagation in event streams */\n    blockPropagation() {\n        return (event) => {\n            return !(this.isPrinting || this.isPrintEvent(event));\n        };\n    }\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     */\n    startPrinting(target, bpList) {\n        this.isPrinting = true;\n        this.formerActivations = target.activatedBreakpoints;\n        target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n    }\n    /** For any print de-activations, reset the entire print queue */\n    stopPrinting(target) {\n        target.activatedBreakpoints = this.deactivations;\n        this.deactivations = [];\n        this.formerActivations = null;\n        this.queue.clear();\n        this.isPrinting = false;\n    }\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     */\n    collectActivations(target, event) {\n        if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n            if (!this.isPrintingBeforeAfterEvent) {\n                // Only clear deactivations if we aren't printing from a `beforeprint` event.\n                // Otherwise, this will clear before `stopPrinting()` is called to restore\n                // the pre-Print Activations.\n                this.deactivations = [];\n                return;\n            }\n            if (!event.matches) {\n                const bp = this.breakpoints.findByQuery(event.mediaQuery);\n                // Deactivating a breakpoint\n                if (bp) {\n                    const hasFormerBp = this.formerActivations && this.formerActivations.includes(bp);\n                    const wasActivated = !this.formerActivations && target.activatedBreakpoints.includes(bp);\n                    const shouldDeactivate = hasFormerBp || wasActivated;\n                    if (shouldDeactivate) {\n                        this.deactivations.push(bp);\n                        this.deactivations.sort(sortDescendingPriority);\n                    }\n                }\n            }\n        }\n    }\n    /** Teardown logic for the service. */\n    ngOnDestroy() {\n        if (this._document.defaultView) {\n            this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n            this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PrintHook, deps: [{ token: BreakPointRegistry }, { token: LAYOUT_CONFIG }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PrintHook, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PrintHook, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: BreakPointRegistry }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n    constructor() {\n        /** Sorted queue with prioritized print breakpoints */\n        this.printBreakpoints = [];\n    }\n    addPrintBreakpoints(bpList) {\n        bpList.push(BREAKPOINT_PRINT);\n        bpList.sort(sortDescendingPriority);\n        bpList.forEach(bp => this.addBreakpoint(bp));\n        return this.printBreakpoints;\n    }\n    /** Add Print breakpoint to queue */\n    addBreakpoint(bp) {\n        if (!!bp) {\n            const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n            if (bpInList === undefined) {\n                // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n                // register as highest priority in the queue\n                this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n                    : [...this.printBreakpoints, bp];\n            }\n        }\n    }\n    /** Restore original activated breakpoints and clear internal caches */\n    clear() {\n        this.printBreakpoints = [];\n    }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp) {\n    return bp?.mediaQuery.startsWith(PRINT) ?? false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n    get activatedAlias() {\n        return this.activatedBreakpoints[0]?.alias ?? '';\n    }\n    set activatedBreakpoints(bps) {\n        this._activatedBreakpoints = [...bps];\n    }\n    get activatedBreakpoints() {\n        return [...this._activatedBreakpoints];\n    }\n    set useFallbacks(value) {\n        this._useFallbacks = value;\n    }\n    constructor(matchMedia, breakpoints, hook) {\n        this.matchMedia = matchMedia;\n        this.breakpoints = breakpoints;\n        this.hook = hook;\n        this._useFallbacks = true;\n        this._activatedBreakpoints = [];\n        this.elementMap = new Map();\n        this.elementKeyMap = new WeakMap();\n        this.watcherMap = new WeakMap(); // special triggers to update elements\n        this.updateMap = new WeakMap(); // callback functions to update styles\n        this.clearMap = new WeakMap(); // callback functions to clear styles\n        this.subject = new Subject();\n        this.observeActivations();\n    }\n    /**\n     * Update styles on breakpoint activates or deactivates\n     * @param mc\n     */\n    onMediaChange(mc) {\n        const bp = this.findByQuery(mc.mediaQuery);\n        if (bp) {\n            mc = mergeAlias(mc, bp);\n            const bpIndex = this.activatedBreakpoints.indexOf(bp);\n            if (mc.matches && bpIndex === -1) {\n                this._activatedBreakpoints.push(bp);\n                this._activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n            else if (!mc.matches && bpIndex !== -1) {\n                // Remove the breakpoint when it's deactivated\n                this._activatedBreakpoints.splice(bpIndex, 1);\n                this._activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n        }\n    }\n    /**\n     * initialize the marshaller with necessary elements for delegation on an element\n     * @param element\n     * @param key\n     * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n     * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n     * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n     */\n    init(element, key, updateFn, clearFn, extraTriggers = []) {\n        initBuilderMap(this.updateMap, element, key, updateFn);\n        initBuilderMap(this.clearMap, element, key, clearFn);\n        this.buildElementKeyMap(element, key);\n        this.watchExtraTriggers(element, key, extraTriggers);\n    }\n    /**\n     * get the value for an element and key and optionally a given breakpoint\n     * @param element\n     * @param key\n     * @param bp\n     */\n    getValue(element, key, bp) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key);\n            }\n        }\n        return undefined;\n    }\n    /**\n     * whether the element has values for a given key\n     * @param element\n     * @param key\n     */\n    hasValue(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key) !== undefined || false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Set the value for an input on a directive\n     * @param element the element in question\n     * @param key the type of the directive (e.g. flex, layout-gap, etc)\n     * @param bp the breakpoint suffix (empty string = default)\n     * @param val the value for the breakpoint\n     */\n    setValue(element, key, val, bp) {\n        let bpMap = this.elementMap.get(element);\n        if (!bpMap) {\n            bpMap = new Map().set(bp, new Map().set(key, val));\n            this.elementMap.set(element, bpMap);\n        }\n        else {\n            const values = (bpMap.get(bp) ?? new Map()).set(key, val);\n            bpMap.set(bp, values);\n            this.elementMap.set(element, bpMap);\n        }\n        const value = this.getValue(element, key);\n        if (value !== undefined) {\n            this.updateElement(element, key, value);\n        }\n    }\n    /** Track element value changes for a specific key */\n    trackValue(element, key) {\n        return this.subject\n            .asObservable()\n            .pipe(filter(v => v.element === element && v.key === key));\n    }\n    /** update all styles for all elements on the current breakpoint */\n    updateStyles() {\n        this.elementMap.forEach((bpMap, el) => {\n            const keyMap = new Set(this.elementKeyMap.get(el));\n            let valueMap = this.getActivatedValues(bpMap);\n            if (valueMap) {\n                valueMap.forEach((v, k) => {\n                    this.updateElement(el, k, v);\n                    keyMap.delete(k);\n                });\n            }\n            keyMap.forEach(k => {\n                valueMap = this.getActivatedValues(bpMap, k);\n                if (valueMap) {\n                    const value = valueMap.get(k);\n                    this.updateElement(el, k, value);\n                }\n                else {\n                    this.clearElement(el, k);\n                }\n            });\n        });\n    }\n    /**\n     * clear the styles for a given element\n     * @param element\n     * @param key\n     */\n    clearElement(element, key) {\n        const builders = this.clearMap.get(element);\n        if (builders) {\n            const clearFn = builders.get(key);\n            if (!!clearFn) {\n                clearFn();\n                this.subject.next({ element, key, value: '' });\n            }\n        }\n    }\n    /**\n     * update a given element with the activated values for a given key\n     * @param element\n     * @param key\n     * @param value\n     */\n    updateElement(element, key, value) {\n        const builders = this.updateMap.get(element);\n        if (builders) {\n            const updateFn = builders.get(key);\n            if (!!updateFn) {\n                updateFn(value);\n                this.subject.next({ element, key, value });\n            }\n        }\n    }\n    /**\n     * release all references to a given element\n     * @param element\n     */\n    releaseElement(element) {\n        const watcherMap = this.watcherMap.get(element);\n        if (watcherMap) {\n            watcherMap.forEach(s => s.unsubscribe());\n            this.watcherMap.delete(element);\n        }\n        const elementMap = this.elementMap.get(element);\n        if (elementMap) {\n            elementMap.forEach((_, s) => elementMap.delete(s));\n            this.elementMap.delete(element);\n        }\n    }\n    /**\n     * trigger an update for a given element and key (e.g. layout)\n     * @param element\n     * @param key\n     */\n    triggerUpdate(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const valueMap = this.getActivatedValues(bpMap, key);\n            if (valueMap) {\n                if (key) {\n                    this.updateElement(element, key, valueMap.get(key));\n                }\n                else {\n                    valueMap.forEach((v, k) => this.updateElement(element, k, v));\n                }\n            }\n        }\n    }\n    /** Cross-reference for HTMLElement with directive key */\n    buildElementKeyMap(element, key) {\n        let keyMap = this.elementKeyMap.get(element);\n        if (!keyMap) {\n            keyMap = new Set();\n            this.elementKeyMap.set(element, keyMap);\n        }\n        keyMap.add(key);\n    }\n    /**\n     * Other triggers that should force style updates:\n     * - directionality\n     * - layout changes\n     * - mutationobserver updates\n     */\n    watchExtraTriggers(element, key, triggers) {\n        if (triggers && triggers.length) {\n            let watchers = this.watcherMap.get(element);\n            if (!watchers) {\n                watchers = new Map();\n                this.watcherMap.set(element, watchers);\n            }\n            const subscription = watchers.get(key);\n            if (!subscription) {\n                const newSubscription = merge(...triggers).subscribe(() => {\n                    const currentValue = this.getValue(element, key);\n                    this.updateElement(element, key, currentValue);\n                });\n                watchers.set(key, newSubscription);\n            }\n        }\n    }\n    /** Breakpoint locator by mediaQuery */\n    findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * get the fallback breakpoint for a given element, starting with the current breakpoint\n     * @param bpMap\n     * @param key\n     */\n    getActivatedValues(bpMap, key) {\n        for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n            const activatedBp = this.activatedBreakpoints[i];\n            const valueMap = bpMap.get(activatedBp.alias);\n            if (valueMap) {\n                if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n                    return valueMap;\n                }\n            }\n        }\n        // On the server, we explicitly have an \"all\" section filled in to begin with.\n        // So we don't need to aggressively find a fallback if no explicit value exists.\n        if (!this._useFallbacks) {\n            return undefined;\n        }\n        const lastHope = bpMap.get('');\n        return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n    }\n    /**\n     * Watch for mediaQuery breakpoint activations\n     */\n    observeActivations() {\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        this.hook.registerBeforeAfterPrintHooks(this);\n        this.matchMedia\n            .observe(this.hook.withPrintQuery(queries))\n            .pipe(tap(this.hook.interceptEvents(this)), filter(this.hook.blockPropagation()))\n            .subscribe(this.onMediaChange.bind(this));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaMarshaller, deps: [{ token: MatchMedia }, { token: BreakPointRegistry }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaMarshaller, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaMarshaller, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: MatchMedia }, { type: BreakPointRegistry }, { type: PrintHook }] });\nfunction initBuilderMap(map, element, key, input) {\n    if (input !== undefined) {\n        const oldMap = map.get(element) ?? new Map();\n        oldMap.set(key, input);\n        map.set(element, oldMap);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BaseDirective2 {\n    /** Access to host element's parent DOM node */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentElement;\n    }\n    /** Access to the HTMLElement for the directive */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /** Access to the activated value for the directive */\n    get activatedValue() {\n        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    set activatedValue(value) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    constructor(elementRef, styleBuilder, styler, marshal) {\n        this.elementRef = elementRef;\n        this.styleBuilder = styleBuilder;\n        this.styler = styler;\n        this.marshal = marshal;\n        this.DIRECTIVE_KEY = '';\n        this.inputs = [];\n        /** The most recently used styles for the builder */\n        this.mru = {};\n        this.destroySubject = new Subject();\n        /** Cache map for style computation */\n        this.styleCache = new Map();\n    }\n    /** For @Input changes */\n    ngOnChanges(changes) {\n        Object.keys(changes).forEach((key) => {\n            if (this.inputs.indexOf(key) !== -1) {\n                const bp = key.split('.').slice(1).join('.');\n                const val = changes[key].currentValue;\n                this.setValue(val, bp);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.destroySubject.next();\n        this.destroySubject.complete();\n        this.marshal.releaseElement(this.nativeElement);\n    }\n    /** Register with central marshaller service */\n    init(extraTriggers = []) {\n        this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /** Add styles to the element using predefined style builder */\n    addStyles(input, parent) {\n        const builder = this.styleBuilder;\n        const useCache = builder.shouldCache;\n        let genStyles = this.styleCache.get(input);\n        if (!genStyles || !useCache) {\n            genStyles = builder.buildStyles(input, parent);\n            if (useCache) {\n                this.styleCache.set(input, genStyles);\n            }\n        }\n        this.mru = { ...genStyles };\n        this.applyStyleToElement(genStyles);\n        builder.sideEffect(input, genStyles, parent);\n    }\n    /** Remove generated styles from an element using predefined style builder */\n    clearStyles() {\n        Object.keys(this.mru).forEach((k) => {\n            this.mru[k] = '';\n        });\n        this.applyStyleToElement(this.mru);\n        this.mru = {};\n        this.currentValue = undefined;\n    }\n    /** Force trigger style updates on DOM element */\n    triggerUpdate() {\n        this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     */\n    getFlexFlowDirection(target, addIfMissing = false) {\n        if (target) {\n            const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n            if (!hasInlineValue && addIfMissing) {\n                const style = buildLayoutCSS(value);\n                const elements = [target];\n                this.styler.applyStyleToElements(style, elements);\n            }\n            return value.trim();\n        }\n        return 'row';\n    }\n    hasWrap(target) {\n        return this.styler.hasWrap(target);\n    }\n    /** Applies styles given via string pair or object map to the directive element */\n    applyStyleToElement(style, value, element = this.nativeElement) {\n        this.styler.applyStyleToElement(element, style, value);\n    }\n    setValue(val, bp) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    updateWithValue(input) {\n        if (this.currentValue !== input) {\n            this.addStyles(input);\n            this.currentValue = input;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: BaseDirective2, deps: [{ token: i0.ElementRef }, { token: StyleBuilder }, { token: StyleUtils }, { token: MediaMarshaller }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.9\", type: BaseDirective2, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: BaseDirective2, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: StyleBuilder }, { type: StyleUtils }, { type: MediaMarshaller }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n    constructor(_zone, _platformId, _document, _breakpoints) {\n        super(_zone, _platformId, _document);\n        this._document = _document;\n        this._breakpoints = _breakpoints;\n        this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n        this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n    }\n    /** Easy method to clear all listeners for all mediaQueries */\n    clearAll() {\n        this.registry.forEach((mql) => {\n            mql.destroy();\n        });\n        this.registry.clear();\n        this.useOverlaps = false;\n    }\n    /** Feature to support manual, simulated activation of a mediaQuery. */\n    activate(mediaQuery, useOverlaps = this.useOverlaps) {\n        mediaQuery = this._validateQuery(mediaQuery);\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n            this._deactivateAll();\n            this._registerMediaQuery(mediaQuery);\n            this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n        return this.hasActivated;\n    }\n    setNonce(nonce) {\n        super._nonce = nonce;\n    }\n    /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n    _validateQuery(queryOrAlias) {\n        const bp = this._breakpoints.findByAlias(queryOrAlias);\n        return bp?.mediaQuery ?? queryOrAlias;\n    }\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     */\n    _activateWithOverlaps(mediaQuery, useOverlaps) {\n        if (useOverlaps) {\n            const bp = this._breakpoints.findByQuery(mediaQuery);\n            const alias = bp?.alias ?? 'unknown';\n            // Simulate activation of overlapping lt-<XXX> ranges\n            switch (alias) {\n                case 'lg':\n                    this._activateByAlias(['lt-xl']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['lt-xl', 'lt-lg']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n                    break;\n                case 'xs':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n                    break;\n            }\n            // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n            switch (alias) {\n                case 'xl':\n                    this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'lg':\n                    this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['gt-sm', 'gt-xs']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['gt-xs']);\n                    break;\n            }\n        }\n        // Activate last since the responsiveActivation is watching *this* mediaQuery\n        return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     */\n    _activateByAlias(aliases) {\n        const activate = (alias) => {\n            const bp = this._breakpoints.findByAlias(alias);\n            this._activateByQuery(bp?.mediaQuery ?? alias);\n        };\n        aliases.forEach(activate);\n    }\n    /**\n     *\n     */\n    _activateByQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this._registerMediaQuery(mediaQuery);\n        }\n        const mql = this.registry.get(mediaQuery);\n        if (mql && !this.isActive(mediaQuery)) {\n            this.registry.set(mediaQuery, mql.activate());\n        }\n        return this.hasActivated;\n    }\n    /** Deactivate all current MQLs and reset the buffer */\n    _deactivateAll() {\n        this.registry.forEach((it) => {\n            it.deactivate();\n        });\n        return this;\n    }\n    /** Insure the mediaQuery is registered with MatchMedia */\n    _registerMediaQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this.registerQuery(mediaQuery);\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return new MockMediaQueryList(query);\n    }\n    get hasActivated() {\n        return this.activations.length > 0;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MockMatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }, { token: BreakPointRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MockMatchMedia }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MockMatchMedia, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: BreakPointRegistry }] });\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList extends EventTarget {\n    get matches() {\n        return this._isActive;\n    }\n    get media() {\n        return this._mediaQuery;\n    }\n    constructor(_mediaQuery) {\n        super();\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /** Notify all listeners that 'matches === TRUE' */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Notify all listeners that 'matches === false' */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Add a listener to our internal list to activate later */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            const cb = listener;\n            cb.call(this, { matches: this.matches, media: this.media });\n        }\n    }\n    /** Don't need to remove listeners in the testing environment */\n    removeListener(_) {\n    }\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nconst MockMatchMediaProvider = {\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Wraps the provided value in an array, unless the provided value is an array. */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@ngbracket/ngx-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n    constructor(breakpoints, matchMedia, hook) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.hook = hook;\n        /** Filter MediaChange notifications for overlapping breakpoints */\n        this.filterOverlaps = false;\n        this.destroyed$ = new Subject();\n        this._media$ = this.watchActivations();\n    }\n    /**\n     * Completes the active subject, signalling to all complete for all\n     * MediaObserver subscribers\n     */\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    // ************************************************\n    // Public Methods\n    // ************************************************\n    /**\n     * Observe changes to current activation 'list'\n     */\n    asObservable() {\n        return this._media$;\n    }\n    /**\n     * Allow programmatic query to determine if one or more media query/alias match\n     * the current viewport size.\n     * @param value One or more media queries (or aliases) to check.\n     * @returns Whether any of the media queries match.\n     */\n    isActive(value) {\n        const aliases = splitQueries(coerceArray(value));\n        return aliases.some((alias) => {\n            const query = toMediaQuery(alias, this.breakpoints);\n            return query !== null && this.matchMedia.isActive(query);\n        });\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     */\n    watchActivations() {\n        const queries = this.breakpoints.items.map((bp) => bp.mediaQuery);\n        return this.buildObservable(queries);\n    }\n    /**\n     * Only pass/announce activations (not de-activations)\n     *\n     * Since multiple-mediaQueries can be activation in a cycle,\n     * gather all current activations into a single list of changes to observers\n     *\n     * Inject associated (if any) alias information into the MediaChange event\n     * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     * - Exclude print activations that do not have an associated mediaQuery\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     */\n    buildObservable(mqList) {\n        const hasChanges = (changes) => {\n            const isValidQuery = (change) => change.mediaQuery.length > 0;\n            return changes.filter(isValidQuery).length > 0;\n        };\n        const excludeOverlaps = (changes) => {\n            return !this.filterOverlaps\n                ? changes\n                : changes.filter((change) => {\n                    const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                    return bp?.overlapping ?? true;\n                });\n        };\n        const ignoreDuplicates = (previous, current) => {\n            if (previous.length !== current.length) {\n                return false;\n            }\n            const previousMqs = previous.map((mc) => mc.mediaQuery);\n            const currentMqs = new Set(current.map((mc) => mc.mediaQuery));\n            const difference = new Set(previousMqs.filter((mq) => !currentMqs.has(mq)));\n            return difference.size === 0;\n        };\n        /**\n         */\n        return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter((change) => change.matches), debounceTime(0, asapScheduler), switchMap((_) => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), distinctUntilChanged(ignoreDuplicates), takeUntil(this.destroyed$));\n    }\n    /**\n     * Find all current activations and prepare single list of activations\n     * sorted by descending priority.\n     */\n    findAllActivations() {\n        const mergeMQAlias = (change) => {\n            const bp = this.breakpoints.findByQuery(change.mediaQuery);\n            return mergeAlias(change, bp);\n        };\n        const replaceWithPrintAlias = (change) => this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n        return this.matchMedia.activations\n            .map((query) => new MediaChange(true, query))\n            .map(replaceWithPrintAlias)\n            .map(mergeMQAlias)\n            .sort(sortDescendingPriority);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaObserver, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaObserver, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: PrintHook }] });\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query, locator) {\n    const bp = locator.findByAlias(query) ?? locator.findByQuery(query);\n    return bp?.mediaQuery ?? null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .flatMap((query) => query.split(','))\n        .map((query) => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class\n */\nclass MediaTrigger {\n    constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.layoutConfig = layoutConfig;\n        this._platformId = _platformId;\n        this._document = _document;\n        this.hasCachedRegistryMatches = false;\n        this.originalActivations = [];\n        this.originalRegistry = new Map();\n    }\n    /**\n     * Manually activate range of breakpoints\n     * @param list array of mediaQuery or alias strings\n     */\n    activate(list) {\n        list = list.map(it => it.trim()); // trim queries\n        this.saveActivations();\n        this.deactivateAll();\n        this.setActivations(list);\n        this.prepareAutoRestore();\n    }\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     */\n    restore() {\n        if (this.hasCachedRegistryMatches) {\n            const extractQuery = (change) => change.mediaQuery;\n            const list = this.originalActivations.map(extractQuery);\n            try {\n                this.deactivateAll();\n                this.restoreRegistryMatches();\n                this.setActivations(list);\n            }\n            finally {\n                this.originalActivations = [];\n                if (this.resizeSubscription) {\n                    this.resizeSubscription.unsubscribe();\n                }\n            }\n        }\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     */\n    prepareAutoRestore() {\n        const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n        const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n        if (enableAutoRestore) {\n            const resize$ = fromEvent(window, 'resize').pipe(take(1));\n            this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n        }\n    }\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     */\n    deactivateAll() {\n        const list = this.currentActivations;\n        this.forceRegistryMatches(list, false);\n        this.simulateMediaChanges(list, false);\n    }\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     */\n    saveActivations() {\n        if (!this.hasCachedRegistryMatches) {\n            const toMediaChange = (query) => new MediaChange(true, query);\n            const mergeMQAlias = (change) => {\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return mergeAlias(change, bp);\n            };\n            this.originalActivations = this.currentActivations\n                .map(toMediaChange)\n                .map(mergeMQAlias)\n                .sort(sortDescendingPriority);\n            this.cacheRegistryMatches();\n        }\n    }\n    /**\n     * Force set manual activations for specified mediaQuery list\n     */\n    setActivations(list) {\n        if (!!this.originalRegistry) {\n            this.forceRegistryMatches(list, true);\n        }\n        this.simulateMediaChanges(list);\n    }\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     */\n    simulateMediaChanges(queries, matches = true) {\n        const toMediaQuery = (query) => {\n            const locator = this.breakpoints;\n            const bp = locator.findByAlias(query) || locator.findByQuery(query);\n            return bp ? bp.mediaQuery : query;\n        };\n        const emitChangeEvent = (query) => this.emitChangeEvent(matches, query);\n        queries.map(toMediaQuery).forEach(emitChangeEvent);\n    }\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     */\n    forceRegistryMatches(queries, matches) {\n        const registry = new Map();\n        queries.forEach(query => {\n            registry.set(query, { matches });\n        });\n        this.matchMedia.registry = registry;\n    }\n    /**\n     * Save current MatchMedia::registry items.\n     */\n    cacheRegistryMatches() {\n        const target = this.originalRegistry;\n        target.clear();\n        this.matchMedia.registry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.hasCachedRegistryMatches = true;\n    }\n    /**\n     * Restore original, 'true' registry\n     */\n    restoreRegistryMatches() {\n        const target = this.matchMedia.registry;\n        target.clear();\n        this.originalRegistry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.originalRegistry.clear();\n        this.hasCachedRegistryMatches = false;\n    }\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     */\n    emitChangeEvent(matches, query) {\n        this.matchMedia.source.next(new MediaChange(matches, query));\n    }\n    get currentActivations() {\n        return this.matchMedia.activations;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaTrigger, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: LAYOUT_CONFIG }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaTrigger, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MediaTrigger, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n    let parts = [grow, shrink, basis];\n    let j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        let matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        let matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\nconst MULTIPLIER_SUFFIX = 'x';\nfunction multiply(value, multiplier) {\n    if (multiplier === undefined) {\n        return value;\n    }\n    const transformValue = (possibleValue) => {\n        const numberValue = +(possibleValue.slice(0, -MULTIPLIER_SUFFIX.length));\n        if (value.endsWith(MULTIPLIER_SUFFIX) && !isNaN(numberValue)) {\n            return `${numberValue * multiplier.value}${multiplier.unit}`;\n        }\n        return value;\n    };\n    return value.includes(' ') ?\n        value.split(' ').map(transformValue).join(' ') : transformValue(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, multiply as ɵmultiply };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}